server:
  port: 6000

spring:
  main:
    web-application-type: reactive #指定应用程序的 Web 应用程序类型为响应式
    allow-bean-definition-overriding: true #允许在应用程序上下文中覆盖相同名称的 Bean 定义
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # gateway可以发现nacos中的微服务，并自动生成转发路由
      routes:
        - id: scct-base-server
          uri: lb://scct-base-server
          predicates:
            - Path=/base/**
      x-forwarded:
        prefix-enabled: false # 避免 Swagger 重复带上额外的 /admin-api/system 前缀

--- #################### 接口文档配置 ####################
#knife4j:
#  gateway:
#    enabled: true
#    # 指定服务发现的模式聚合微服务文档，并且是默认`default`分组
#    strategy: discover
#    discover:
#      enabled: true
#      # 指定版本号(Swagger2|OpenAPI3)
#      version : openapi3
#      # 需要排除的微服务(eg:网关服务)
#      excluded-services:
#        - scct-gateway-server


knife4j:
  # 聚合swagger文档
  gateway:
    enabled: true
    # 排序规则(tag/operation排序自4.2.0版本新增)
    # 取值：alpha-默认排序规则，官方swagger-ui默认实现,order-Knife4j提供的增强排序规则，开发者可扩展x-order，根据数值来自定义排序
    tags-sorter: order
    operations-sorter: order
    # 指定手动配置的模式(默认为该模式)
    strategy: manual
    routes:
      - name: 用户服务
        # 真实子服务访问url地址-提供OpenAPI的文档
        url: /scct-base-server/v2/api-docs?group=default
        service-name: scct-base-server
        # 路由前缀
        # 兼容OpenAPI3规范在聚合时丢失contextPath属性的异常情况，由开发者自己配置contextPath,Knife4j的前端Ui做兼容处理,与url属性独立不冲突，仅OpenAPI3规范聚合需要，OpenAPI2规范不需要设置此属性,默认为(apiPathPrefix)
        context-path: /
        order: 2

